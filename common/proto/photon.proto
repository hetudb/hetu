/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package photon;

import "schema.proto";

/**
 * RowResult represents one row from a scanner, in row-wise layout.
 */
message PartialRowProto {
  schema.SchemaProto schema = 1;

  // Variable length data. If string, will be UTF-8 encoded. Elements of this list _must_ have a
  // mark that we can reset() to. Readers of these fields (encoders, etc) must call reset() before
  // attempting to read these values.
  repeated bytes varLengthData = 2;
  bytes rowAlloc = 3;
  bytes columnsBitSet = 4;
  optional bytes nullsBitSet = 5;
}

// A set of operations (INSERT, UPDATE, UPSERT, or DELETE) to apply to a table,
// or the set of split rows and range bounds when creating or altering table.
// Range bounds determine the boundaries of range partitions during table
// creation, split rows further subdivide the ranges into more partitions.
message RowOperationsPB {
  enum Type {
    UNKNOWN = 0;
    INSERT = 1;
    UPDATE = 2;
    DELETE = 3;
    UPSERT = 5;
    INSERT_IGNORE = 10;
    UPDATE_IGNORE = 11;
    DELETE_IGNORE = 12;

    // Used when specifying split rows on table creation.
    SPLIT_ROW = 4;
    // Used when specifying an inclusive lower bound range on table creation.
    // Should be followed by the associated upper bound. If all values are
    // missing, then signifies unbounded.
    RANGE_LOWER_BOUND = 6;
    // Used when specifying an exclusive upper bound range on table creation.
    // Should be preceded by the associated lower bound. If all values are
    // missing, then signifies unbounded.
    RANGE_UPPER_BOUND = 7;
    // Used when specifying an exclusive lower bound range on table creation.
    // Should be followed by the associated upper bound. If all values are
    // missing, then signifies unbounded.
    EXCLUSIVE_RANGE_LOWER_BOUND = 8;
    // Used when specifying an inclusive upper bound range on table creation.
    // Should be preceded by the associated lower bound. If all values are
    // missing, then signifies unbounded.
    INCLUSIVE_RANGE_UPPER_BOUND = 9;
  }

  // schema of row
  schema.SchemaProto schema = 1;
  // The row data for each operation is stored in the following format:
  //
  // [operation type] (one byte):
  //   A single-byte field which determines the type of operation. The values are
  //   based on the 'Type' enum above.
  // [column isset bitmap]   (one bit for each column in the Schema, rounded to nearest byte)
  //   A set bit in this bitmap indicates that the user has specified the given column
  //   in the row. This indicates that the column will be present in the data to follow.
  // [null bitmap]           (one bit for each Schema column, rounded to nearest byte)
  //   A set bit in this bitmap indicates that the given column is NULL.
  //   This is only present if there are any nullable columns.
  // [column data]
  //   For each column which is set and not NULL, the column's data follows. The data
  //   format of each cell is the canonical in-memory format (eg little endian).
  //   For string data, the pointers are relative to 'indirect_data'.
  //
  // The rows are concatenated end-to-end with no padding/alignment.
  optional bytes rows = 2;
  optional bytes indirect_data = 3;
}

// A row chunk in which each row is stored contiguously.
message RowwiseRowChunkPB {
  optional int32 totalNumRows = 1; // [ default = 0];
  // The number of rows in the block. This can typically be calculated
  // by dividing rows.size() by the width of the row, but in the case that
  // the client is scanning an empty projection (i.e a COUNT(*)), this
  // field is the only way to determine how many rows were returned.
  optional int32 numRows = 2; // [ default = 0 ];

  // Sidecar index for the row data.
  optional int32 rowsSidecar = 3;

  // Sidecar index for the indirect data.
  optional int32 indirectDataSidecar = 4;
  // Byte offsets for side cars in the main body of the response message.
  // These offsets are counted AFTER the message header, i.e., offset 0
  // is the first byte after the bytes for this protobuf.
  repeated uint32 sidecarOffsets = 5;
  optional bytes rows = 6;
}

// A chunk of rows in columnar layout.
message ColumnarRowChunkPB {
  message Column {
    // The index of the sidecar containing cell data of the column.
    optional int32 dataSidecar = 1;

    // The index of the sidecar containing any data referred to by binary/string data.
    // In this case, the `data` sidecar will contain an array of `num_rows + 1` uint32s
    // pointing to offsets in this sidecar.
    optional int32 varlenDataSidecar = 2;

    // If the column is nullable, The index of the sidecar containing a bitmap with a set
    // bit for all non-null cells.
    optional int32 nonNullBitmapSidecar = 3;
  }
  repeated Column columns = 1;
  optional int32 totalNumRows = 2; // [ default = 0];
  optional int64 numRows = 3;
  // Byte offsets for side cars in the main body of the response message.
  // These offsets are counted AFTER the message header, i.e., offset 0
  // is the first byte after the bytes for this protobuf.
  repeated uint32 sidecarOffsets = 4;
  optional bytes rows = 5;
}

message BlockBloomFilterPB {
  // Log2 of the space for the BlockBloomFilter.
  optional int32 log_space_bytes = 1;
  // The bloom filter bitmap.
  optional bytes bloom_data = 2;
  // Whether the BlockBloomFilter is empty and hence always returns false for lookups.
  optional bool always_false = 3;
  // Hash algorithm to generate 32-bit unsigned integer hash values before inserting
  // in the BlockBloomFilter.
  optional HashAlgorithm hash_algorithm = 4; // [default = FAST_HASH];
  // Seed used to hash the input values in the hash algorithm.
  optional uint32 hash_seed = 5; // [default = 0];
}

// Implemented hash algorithms.
enum HashAlgorithm {
  UNKNOWN_HASH = 0;
  MURMUR_HASH_2 = 1;
  CITY_HASH = 2;
  FAST_HASH = 3;
}

// A predicate that can be applied on a hetu column.
message ColumnPredicatePB {
  // The predicate column name.
  string column = 1;

  enum Sort {
    ASC = 0;
    DESC = 1;
  }

  message Limit {
    int32 rowNum = 1;
    int32 offset = 2;
  }

  message Range {

    // Bounds should be encoded as follows:
    // - STRING/BINARY values: simply the exact string value for the bound.
    // - other type: the canonical x86 in-memory representation -- eg for
    //   uint32s, a little-endian value.
    //
    // Note that this predicate type should not be used for NULL data --
    // NULL is defined to neither be greater than or less than other values
    // for the comparison operator.

    // The inclusive lower bound.
    optional bytes lower = 1;

    // The exclusive upper bound.
    optional bytes upper = 2;
  }

  message Equality {
    // The inclusive lower bound. See comment in Range for notes on the
    // encoding.
    optional bytes value = 1;
  }

  message InList {
    // A list of values for the field. See comment in Range for notes on
    // the encoding.
    repeated bytes values = 1;
  }

  message IsNotNull {}

  message IsNull {}

  message InBloomFilter {
    // A list of bloom filters for the field.
    repeated BlockBloomFilterPB bloom_filters = 1;

    // lower and upper are optional for InBloomFilter.
    // When using both InBloomFilter and Range predicate for the same column the
    // merged result can be InBloomFilter within specified range.
    //
    // The inclusive lower bound.
    optional bytes lower = 2;

    // The exclusive upper bound.
    optional bytes upper = 3;
  }

  oneof predicate {
    Range range = 2;
    Equality equality = 3;
    IsNotNull is_not_null = 4;
    InList in_list = 5;
    IsNull is_null = 6;
    InBloomFilter in_bloom_filter = 7;
    Sort sort = 8;
    Limit limit = 9;
  }
}
